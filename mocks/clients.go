// Code generated by MockGen. DO NOT EDIT.
// Source: storage/client_services.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/DecodeWorms/getservices/models"
	gomock "github.com/golang/mock/gomock"
)

// MockClientServices is a mock of ClientServices interface.
type MockClientServices struct {
	ctrl     *gomock.Controller
	recorder *MockClientServicesMockRecorder
}

// MockClientServicesMockRecorder is the mock recorder for MockClientServices.
type MockClientServicesMockRecorder struct {
	mock *MockClientServices
}

// NewMockClientServices creates a new mock instance.
func NewMockClientServices(ctrl *gomock.Controller) *MockClientServices {
	mock := &MockClientServices{ctrl: ctrl}
	mock.recorder = &MockClientServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientServices) EXPECT() *MockClientServicesMockRecorder {
	return m.recorder
}

// ActivateAccount mocks base method.
func (m *MockClientServices) ActivateAccount(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateAccount", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateAccount indicates an expected call of ActivateAccount.
func (mr *MockClientServicesMockRecorder) ActivateAccount(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateAccount", reflect.TypeOf((*MockClientServices)(nil).ActivateAccount), email)
}

// ActivateAddress mocks base method.
func (m *MockClientServices) ActivateAddress(clientId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateAddress", clientId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateAddress indicates an expected call of ActivateAddress.
func (mr *MockClientServicesMockRecorder) ActivateAddress(clientId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateAddress", reflect.TypeOf((*MockClientServices)(nil).ActivateAddress), clientId)
}

// AddressByClientId mocks base method.
func (m *MockClientServices) AddressByClientId(clientId string) (models.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressByClientId", clientId)
	ret0, _ := ret[0].(models.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddressByClientId indicates an expected call of AddressByClientId.
func (mr *MockClientServicesMockRecorder) AddressByClientId(clientId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressByClientId", reflect.TypeOf((*MockClientServices)(nil).AddressByClientId), clientId)
}

// Client mocks base method.
func (m *MockClientServices) Client(clientId string) (models.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client", clientId)
	ret0, _ := ret[0].(models.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Client indicates an expected call of Client.
func (mr *MockClientServicesMockRecorder) Client(clientId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockClientServices)(nil).Client), clientId)
}

// ClientByEmail mocks base method.
func (m *MockClientServices) ClientByEmail(email string) (*models.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientByEmail", email)
	ret0, _ := ret[0].(*models.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClientByEmail indicates an expected call of ClientByEmail.
func (mr *MockClientServicesMockRecorder) ClientByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientByEmail", reflect.TypeOf((*MockClientServices)(nil).ClientByEmail), email)
}

// ClientByPhoneNumber mocks base method.
func (m *MockClientServices) ClientByPhoneNumber(phoneNumber string) (*models.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientByPhoneNumber", phoneNumber)
	ret0, _ := ret[0].(*models.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClientByPhoneNumber indicates an expected call of ClientByPhoneNumber.
func (mr *MockClientServicesMockRecorder) ClientByPhoneNumber(phoneNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientByPhoneNumber", reflect.TypeOf((*MockClientServices)(nil).ClientByPhoneNumber), phoneNumber)
}

// Clients mocks base method.
func (m *MockClientServices) Clients() ([]models.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clients")
	ret0, _ := ret[0].([]models.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clients indicates an expected call of Clients.
func (mr *MockClientServicesMockRecorder) Clients() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clients", reflect.TypeOf((*MockClientServices)(nil).Clients))
}

// Create mocks base method.
func (m *MockClientServices) Create(cl models.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", cl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockClientServicesMockRecorder) Create(cl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClientServices)(nil).Create), cl)
}

// CreateAddress mocks base method.
func (m *MockClientServices) CreateAddress(add models.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAddress", add)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAddress indicates an expected call of CreateAddress.
func (mr *MockClientServicesMockRecorder) CreateAddress(add interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAddress", reflect.TypeOf((*MockClientServices)(nil).CreateAddress), add)
}

// DeactivateAccount mocks base method.
func (m *MockClientServices) DeactivateAccount(clientId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateAccount", clientId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateAccount indicates an expected call of DeactivateAccount.
func (mr *MockClientServicesMockRecorder) DeactivateAccount(clientId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateAccount", reflect.TypeOf((*MockClientServices)(nil).DeactivateAccount), clientId)
}

// DeactivateAddress mocks base method.
func (m *MockClientServices) DeactivateAddress(clientId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateAddress", clientId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateAddress indicates an expected call of DeactivateAddress.
func (mr *MockClientServicesMockRecorder) DeactivateAddress(clientId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateAddress", reflect.TypeOf((*MockClientServices)(nil).DeactivateAddress), clientId)
}

// GetDeletdAddressById mocks base method.
func (m *MockClientServices) GetDeletdAddressById(id string) (*models.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeletdAddressById", id)
	ret0, _ := ret[0].(*models.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeletdAddressById indicates an expected call of GetDeletdAddressById.
func (mr *MockClientServicesMockRecorder) GetDeletdAddressById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeletdAddressById", reflect.TypeOf((*MockClientServices)(nil).GetDeletdAddressById), id)
}

// GetDeletedAgentById mocks base method.
func (m *MockClientServices) GetDeletedAgentById(id string) (*models.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeletedAgentById", id)
	ret0, _ := ret[0].(*models.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeletedAgentById indicates an expected call of GetDeletedAgentById.
func (mr *MockClientServicesMockRecorder) GetDeletedAgentById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeletedAgentById", reflect.TypeOf((*MockClientServices)(nil).GetDeletedAgentById), id)
}

// Login mocks base method.
func (m *MockClientServices) Login(email string) (*models.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", email)
	ret0, _ := ret[0].(*models.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockClientServicesMockRecorder) Login(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockClientServices)(nil).Login), email)
}

// Update mocks base method.
func (m *MockClientServices) Update(clientId string, cl models.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", clientId, cl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockClientServicesMockRecorder) Update(clientId, cl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClientServices)(nil).Update), clientId, cl)
}

// UpdateAddress mocks base method.
func (m *MockClientServices) UpdateAddress(clientId string, data models.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddress", clientId, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAddress indicates an expected call of UpdateAddress.
func (mr *MockClientServicesMockRecorder) UpdateAddress(clientId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockClientServices)(nil).UpdateAddress), clientId, data)
}

// UpdatePassword mocks base method.
func (m *MockClientServices) UpdatePassword(passwordData *models.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", passwordData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockClientServicesMockRecorder) UpdatePassword(passwordData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockClientServices)(nil).UpdatePassword), passwordData)
}
